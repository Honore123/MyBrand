const express = require("express");
const blogController = require("../controllers/blogController");
const commentController = require("../controllers/commentController");
const { authMiddleware } = require("../middleware/authMiddleware");
const blogRouter = express.Router();

/**
 * @swagger
 * components:
 *    schema:
 *      Blog:
 *        type: object
 *        required:
 *          -title
 *          -content
 *          -thumbnail
 *        properties:
 *          id:
 *              type: string
 *              description: autogenerated blog Id
 *          title:
 *              type: string
 *              description: Title of your blog
 *          content:
 *              type: string
 *              description: Content of your Blog
 *          thumbnail:
 *              type: string
 *              description: thumbnail image for your blog
 *        example:
 *          id: 6408346dd82cffa860074222
 *          title: My first blog
 *          content: This is my first blog
 *          thumbnail: public/images/first_blog.png
 */

blogRouter
  /**
   * @swagger
   * tags:
   *  name: Blog
   *  description: Blog managing APIs
   * /blogs:
   *  get:
   *   security:
   *      - bearerAuth: []
   *   summary: Fetch all blogs
   *   tags: [Blog]
   *   responses:
   *    200:
   *      description: List all blogs
   *      content:
   *        application/json:
   *          schema:
   *            type: array
   *            properties:
   *                data:
   *                  type: array
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data: [
   *                    {
   *                       "_id": "6408346dd82cffa860074200",
   *                      "title": "My First Blog",
   *                     "content": "hello there",
   *                    "likes": 2,
   *                       "thumbnail": "sdasdas",
   *                       "createdAt": "2023-03-08T07:08:29.851Z",
   *                       "updatedAt": "2023-03-08T07:08:29.851Z",
   *                       "__v": 0
   *                   }
   *                  ]
   *                status: 200
   *                message: "blogs fetched successfully"
   */
  .get("/", blogController.index)

  /**
   * @swagger
   * tags:
   *  name: Blog
   *  description: Blog managing APIs
   * /blogs/{id}:
   *  get:
   *   security:
   *     - bearerAuth: []
   *   summary: Fetch a single blog by ID
   *   tags: [Blog]
   *   parameters:
   *     - name: id
   *       in: path
   *       required: true
   *       description: The ID of the blog to return.
   *       schema:
   *         type: string
   *   responses:
   *    200:
   *      description: List a blog
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                data:
   *                  type: object
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data:
   *                    {
   *                       "_id": "6408346dd82cffa860074200",
   *                      "title": "My First Blog",
   *                     "content": "hello there",
   *                    "likes": 2,
   *                       "thumbnail": "sdasdas",
   *                       "createdAt": "2023-03-08T07:08:29.851Z",
   *                       "updatedAt": "2023-03-08T07:08:29.851Z",
   *                       "__v": 0
   *                   }
   *
   *                status: 200
   *                message: "blog fetched successfully"
   */
  .get("/:id", blogController.show)
  /**
   * @swagger
   * tags:
   *  name: Blog
   *  description: Blog managing APIs
   * /blogs/limit/{number}:
   *  get:
   *   security:
   *     - bearerAuth: []
   *   summary: Fetch a certain number of blogs
   *   tags: [Blog]
   *   parameters:
   *     - name: number
   *       in: path
   *       required: true
   *       description: The number of blogs to return.
   *       schema:
   *         type: string
   *   responses:
   *    200:
   *      description: List blogs
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                data:
   *                  type: object
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data:
   *                    {
   *                       "_id": "6408346dd82cffa860074200",
   *                      "title": "My First Blog",
   *                     "content": "hello there",
   *                    "likes": 2,
   *                       "thumbnail": "sdasdas",
   *                       "createdAt": "2023-03-08T07:08:29.851Z",
   *                       "updatedAt": "2023-03-08T07:08:29.851Z",
   *                       "__v": 0
   *                   }
   *
   *                status: 200
   *                message: "blogs fetched successfully"
   */
  .get("/limit/:number", blogController.fetchLimit)
  .get("/images/:image", blogController.fetchImage)
  /**
   * @swagger
   * tags:
   *  name: Blog
   *  description: Blog managing APIs
   * /blogs:
   *  post:
   *   summary: Creating new blog
   *   tags: [Blog]
   *   requestBody:
   *      required: true
   *      content:
   *        application/json:
   *          schema:
   *              type: object
   *              properties:
   *                title:
   *                  type: string
   *                content:
   *                  type: string
   *                likes:
   *                  type: integer
   *                thumbnail:
   *                  type: string
   *              example:
   *                title: "My blog title"
   *                content:  "blog content"
   *                likes: 0
   *                thumbnail: "public/images/honore.png"
   *   responses:
   *    200:
   *      description: List a blog
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                data:
   *                  type: object
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data:
   *                    {
   *                       "_id": "6408346dd82cffa860074200",
   *                      "title": "My First Blog",
   *                     "content": "hello there",
   *                    "likes": 2,
   *                       "thumbnail": "sdasdas",
   *                       "createdAt": "2023-03-08T07:08:29.851Z",
   *                       "updatedAt": "2023-03-08T07:08:29.851Z",
   *                       "__v": 0
   *                   }
   *
   *                status: 200
   *                message: "blogs created successfully"
   *    400:
   *      description: Authorization error
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                status: 400
   *                message: "You're not logged in"
   */
  .post(
    "/",
    authMiddleware,
    blogController.upload.single("thumbnail"),
    blogController.store
  )
  .put("/:id", authMiddleware, blogController.update)
  /**
   * @swagger
   * tags:
   *  name: Blog
   *  description: Blog managing APIs
   * /blogs/{id}:
   *  delete:
   *   summary: Delete a blog
   *   tags: [Blog]
   *   parameters:
   *     - name: id
   *       in: path
   *       required: true
   *       description: The ID of the blog to delete.
   *       schema:
   *         type: string
   *   responses:
   *    200:
   *      description: Deleted blog
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                data:
   *                  type: object
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data:
   *                    {
   *                       "_id": "6408346dd82cffa860074200",
   *                      "title": "My First Blog",
   *                     "content": "hello there",
   *                    "likes": 2,
   *                       "thumbnail": "sdasdas",
   *                       "createdAt": "2023-03-08T07:08:29.851Z",
   *                       "updatedAt": "2023-03-08T07:08:29.851Z",
   *                       "__v": 0
   *                   }
   *
   *                status: 200
   *                message: "blog deleted successfully"
   *    400:
   *      description: Authorization error
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                status: 400
   *                message: "You're not logged in"
   */
  .delete("/:id", authMiddleware, blogController.destroy)

  /**
   * @swagger
   * tags:
   *  name: Blog Comment
   *  description: Blog comment APIs
   * /blogs/{blogId}/comments:
   *  get:
   *   security:
   *     - bearerAuth: []
   *   summary: Fetch a single blog's comment by ID
   *   tags: [Blog Comment]
   *   parameters:
   *     - name: blogId
   *       in: path
   *       required: true
   *       description: The ID of the blog to return it's comments.
   *       schema:
   *         type: string
   *   responses:
   *    200:
   *      description: List a blog's comments
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                data:
   *                  type: array
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data:
   *                  [
   *                    {
   *                      comment: "First comment",
   *                      names: "Honore",
   *                      _id: "6409a440b32b13e54c9372aa"
   *                    }
   *                   ]
   *                status: 200
   *                message: "blog fetched successfully"
   */
  .get("/:blogId/comments", commentController.index)

  /**
   * @swagger
   * tags:
   *  name: Blog Comment
   *  description: Blog comment APIs
   * /blogs/{blogId}/comments:
   *  post:
   *   security:
   *    - bearerAuth: []
   *   summary: Creating new comment
   *   tags: [Blog Comment]
   *   parameters:
   *     - name: blogId
   *       in: path
   *       required: true
   *       description: The ID of the blog to comment on.
   *       schema:
   *         type: string
   *   requestBody:
   *      required: true
   *      content:
   *        application/json:
   *          schema:
   *              type: object
   *              properties:
   *                names:
   *                  type: string
   *                comment:
   *                  type: string
   *              example:
   *                names: "your names"
   *                comment:  "your comment"
   *   responses:
   *    200:
   *      description: List of comments
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                data:
   *                  type: array
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data:
   *                  [
   *                    {
   *                      comment: "First comment",
   *                      names: "Honore",
   *                      _id: "6409a440b32b13e54c9372aa"
   *                    }
   *                   ]
   *                status: 200
   *                message: "Comment added successfully"
   *    404:
   *      description: Not found error
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                status: 404
   *                message: "Blog not found"
   */
  .post("/:blogId/comments", commentController.store)
  /**
   * @swagger
   * tags:
   *  name: Blog Like
   *  description: Blog Like API
   * /blogs/{id}/likes:
   *  post:
   *   security:
   *     - bearerAuth: []
   *   summary: Like a blog
   *   tags: [Blog Like]
   *   parameters:
   *     - name: id
   *       in: path
   *       required: true
   *       description: The ID of the blog to like.
   *       schema:
   *         type: string
   *   responses:
   *    200:
   *      description: List a liked blog
   *      content:
   *        application/json:
   *          schema:
   *            type: object
   *            properties:
   *                data:
   *                  type: object
   *                status:
   *                  type: integer
   *                message:
   *                  type: string
   *            example:
   *                data:
   *                    {
   *                      "_id": "6408346dd82cffa860074200",
   *                      "title": "My First Blog",
   *                      "content": "hello there",
   *                      "likes": 2,
   *                       "thumbnail": "sdasdas",
   *                       "createdAt": "2023-03-08T07:08:29.851Z",
   *                       "updatedAt": "2023-03-08T07:08:29.851Z",
   *                       "__v": 0
   *                   }
   *
   *                status: 200
   *                message: "blog liked successfully"
   */
  .post("/:blogId/likes", blogController.like);
module.exports = blogRouter;
